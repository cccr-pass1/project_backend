name: Scanning & Git Actions to Docker Hub
run-name: ${{ github.actor }} is running DevSecOps pipeline for Spring Backend 

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: nuitciel/cccr_project1_backend
  REGISTRY: docker.io
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
     
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and Push Docker Image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew build sonar --info
          ./gradlew bootBuildImage -x test --imageName=$IMAGE_NAME:${{ github.sha }}
          echo $DOCKER_PASSWORD | docker login $REGISTRY -u $DOCKER_USER --password-stdin
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build succeeded for commit to Docker Hub: ${{ github.sha }}"}' $SLACK_WEBHOOK_URL

      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build failed for commit to Docker Hub: ${{ github.sha }}"}' $SLACK_WEBHOOK_URL

  scan:
    needs: [build-and-push]
    runs-on: ubuntu-22.04
    permissions:
      actions: read  
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login $REGISTRY -u $DOCKER_USER --password-stdin
      - name: Pull Docker Image
        run: |
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
#         exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  zap-scan:
    needs: [build-and-push, scan]
    runs-on: ubuntu-22.04
    steps:
      - name: Run Spring Boot application
        run: |
          docker run -d -p 8081:8081 --name backendzapscan ${{ env.IMAGE_NAME }}:${{ github.sha }}
          
      - name: Run OWASP ZAP full scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: "http://localhost:8081"
          cmd_options: '-a'

      - name: Evaluate ZAP Results
        id: zap-results
        run: |
          high_alerts=$(grep -c "high:" report_html.html)
          if (( $high_alerts > 5 )); then
            echo "::error::ZAP scan failed - high alerts exceed threshold" 
            exit 1
